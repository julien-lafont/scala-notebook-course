{
  "metadata":{
    "name":"5. Either",
    "user_save_timestamp":"2015-08-26T09:47:54.430Z",
    "auto_save_timestamp":"2015-08-26T09:22:32.304Z"
  },
  "worksheets":[{
    "cells":[{
      "cell_type":"heading",
      "source":"Either",
      "level":1
    },{
      "cell_type":"heading",
      "source":"Implémentation basique",
      "level":2
    },{
      "cell_type":"code",
      "input":"abstract class EEither[+A, +B] {\n  def isLeft: Boolean\n  def isRight: Boolean \n}\n\nclass Left[+A, +B](a: A) extends Either[A, B] {\n  def isLeft = true\n  def isRight = false\n}\n\ncase class Right[+A, +B](b: B) extends Either[A, B] {\n  def isLeft = false\n  def isRight = true\n}",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"heading",
      "source":"Création d'un Either",
      "level":2
    },{
      "cell_type":"code",
      "input":"val l: Either[String, Int] = Left(\"xx\")\nval r: Either[Seq[Int], Long] = Right(12)",
      "language":"scala",
      "collapsed":false,
      "prompt_number":12,
      "outputs":[]
    },{
      "cell_type":"heading",
      "source":" Opérations sur un Either",
      "level":2
    },{
      "cell_type":"code",
      "input":"val op = l match {\n  case Left(str) => s\"Hello $str\"\n  case Right(int) => s\"Coucou $int fois\"\n}",
      "language":"scala",
      "collapsed":false,
      "prompt_number":6,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val op2 = r.fold(\n  left => left.size,\n  right => right\n)",
      "language":"scala",
      "collapsed":false,
      "prompt_number":13,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// Souvent on utilise un either pour modéliser une opération qui peut échouer.\n\ncase class BusinessError(code: Int, message: String)\n\ndef sqrt(number: Long): Either[BusinessError, Double] = {\n    if (number < 0) Left(BusinessError(409, \"number must not be negative\"))\n    else Right(Math.sqrt(number))\n}\n\nval res1 = sqrt(10)\nval res2 = sqrt(-10)",
      "language":"scala",
      "collapsed":false,
      "prompt_number":17,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// On peut aussi faire un `map` sur un Either, mais il faut en premier indiquer sur quel side effectuer\n// l'opération.\n\nr.right.map(long => long / 1.1)\n\n// Either[Seq[Int], Long] => Either[Int, Double]\n",
      "language":"scala",
      "collapsed":false,
      "prompt_number":23,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// On dit que either n'est pas biaisé, ni à gauche, ni à droite\n\nr.left.map(list => list.head)\n .right.map(l => s\"hello $l\")\n \n// Either[Seq[Int], Long] => Either[Int, Long]",
      "language":"scala",
      "collapsed":false,
      "prompt_number":24,
      "outputs":[]
    },{
      "cell_type":"heading",
      "source":"Problématiques",
      "level":2
    },{
      "cell_type":"heading",
      "source":"- Difficile de travailler sur plusieurs Either",
      "level":3
    },{
      "cell_type":"code",
      "input":"val e1: Either[String, Int] = Right(100)\nval e2: Either[String, String] = Right(\"toto\")\nval e3: Either[String, Double] = Left(\"error 1\")\nval e4: Either[String, Char] = Left(\"error 2\")\n  \nfor {\n  v1 <- e1.right\n  v2 <- e2.right\n} yield s\"$v1 -> $v2\"\n  \n// scala.util.Either[String,String] = Right(\"100 => toto\")",
      "language":"scala",
      "collapsed":false,
      "prompt_number":38,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val e1: Either[String, Int] = Right(100)\nval e2: Either[String, String] = Right(\"toto\")\nval e3: Either[String, Double] = Left(\"error 1\")\nval e4: Either[String, Char] = Left(\"error 2\")\n  \nfor {\n  v1 <- e1.right\n  v2 <- e2.right\n  v3 <- e3.right\n  v4 <- e4.right\n} yield v4\n  \n// scala.util.Either[String,Char] = Left(error 1)",
      "language":"scala",
      "collapsed":false,
      "prompt_number":40,
      "outputs":[]
    },{
      "cell_type":"heading",
      "source":"- Impossible d'accumuler les erreurs",
      "level":2
    },{
      "cell_type":"markdown",
      "source":"Il existe des implémentations basées sur un type Either permettant d'accumuler facilement les erreurs\n\nPlay ou scalaZ ont un type Validation qui peut être Success[T] ou Failure[Seq[Error]]"
    },{
      "cell_type":"heading",
      "source":"- Pas de biais par défaut",
      "level":2
    },{
      "cell_type":"raw",
      "source":"Dans de nombreux cas il est plus simple qu'un `map` fonctionne sur sur la partie succès de l'either (droite).\nOn parle de type \"right biased\".\n\nScalaZ validation `\\/` est right-biased.\n`Try` est d'une certaine manière right-biased."
    },{
      "cell_type":"heading",
      "source":"Quizz",
      "level":2
    },{
      "cell_type":"code",
      "input":"case class Errors(messages: Seq[String])\nobject Errors {\n  // Shortcut to create an Errors with just one message\n  def apply(first: String): Errors = Errors(Seq(first))\n}\n\nval sampleValidation = Right(\"ok\")\nval sampleValidation2 = Left(Errors(\"oneError\"))",
      "language":"scala",
      "collapsed":false,
      "prompt_number":7,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"/**\n* Compose the results of the two validations.\n* If the 2 validations are a success, return a tuple with their values\n* If at least one of the validation failed, return the accumulations of the errors\n*/\ndef compose[B, C](first: Either[Errors, B], second: Either[Errors, C]): Either[Errors, (B, C)] = {\n  (first, second) match {\n    case (Right(v1), Right(v2)) => Right((v1, v2))\n    case (Left(e1), Left(e2)) => Left(Errors(e1.messages ++ e2.messages))\n    case (Left(e1), _) => Left(e1)\n    case (_, Left(e2)) => Left(e2)\n  }\n}\n\nassert(compose(Left(Errors(\"a\")), Left(Errors(\"b\"))) == Left(Errors(Seq(\"a\", \"b\"))))\nassert(compose(Left(Errors(\"a\")), Right(1)) == Left(Errors(Seq(\"a\"))))\nassert(compose(Right(1), Right(2)) == Right((1, 2)))",
      "language":"scala",
      "collapsed":false,
      "prompt_number":8,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"/**\n* Sequence a list of validations\n* Accumulate errors if at least one validation failed\n* Accumulate success value if all the validations succeed\n*/\ndef sequence[B](validations: Seq[Either[Errors, B]]): Either[Errors, Seq[B]] = {\n  val neutral: Either[Errors, Seq[B]] = Right(Seq.empty)\n  validations.foldLeft(neutral) {\n    case (Right(v1), Right(v2)) => Right(v1 ++ Seq(v2))\n    case (maybeErr1, maybeErr2) => Left(compose(maybeErr1, maybeErr2).left.get)\n  }\n}\n\nassert(sequence(Seq(Left(Errors(\"a\")), Left(Errors(\"b\")))) == Left(Errors(Seq(\"a\", \"b\"))))\nassert(sequence(Seq(Left(Errors(\"a\")), Right(2))) == Left(Errors(Seq(\"a\"))))\nassert(sequence(Seq(Right(1), Right(2), Right(3))) == Right(Seq(1, 2, 3)))",
      "language":"scala",
      "collapsed":false,
      "prompt_number":9,
      "outputs":[]
    }]
  }],
  "autosaved":[],
  "nbformat":3
}