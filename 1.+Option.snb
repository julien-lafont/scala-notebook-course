{
  "metadata":{
    "name":"1. Option",
    "user_save_timestamp":"2015-08-26T07:53:23.839Z",
    "auto_save_timestamp":"2015-08-26T07:53:20.367Z"
  },
  "worksheets":[{
    "cells":[{
      "cell_type":"markdown",
      "source":"# Option"
    },{
      "cell_type":"heading",
      "source":"Implémentation basique",
      "level":2
    },{
      "cell_type":"code",
      "input":"/*\n  trait Option[+T]\n  case class Some[+T](value: T) extends Option[T]\n  case object None extends Option[Nothing]\n*/",
      "language":"scala",
      "collapsed":false,
      "prompt_number":157,
      "outputs":[]
    },{
      "cell_type":"heading",
      "source":"Créer une option",
      "level":2
    },{
      "cell_type":"code",
      "input":"private def somethingThatMayBeNull() = null\n\n// Initialisation\nval x: Option[String] = Some(\"foo\")\nval y: Option[String] = None\nval z: Option[String] = Option(somethingThatMayBeNull())",
      "language":"scala",
      "collapsed":false,
      "prompt_number":158,
      "outputs":[]
    },{
      "cell_type":"heading",
      "source":"Opérations",
      "level":2
    },{
      "cell_type":"code",
      "input":"// Calculer une expression en fonction de la présence ou non d'une valeur\nx match {\n  case Some(extracted) => extracted + \"bar\"\n  case None => \"nothing\"\n}",
      "language":"scala",
      "collapsed":false,
      "prompt_number":159,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// Autre méthode (valeur par défaut)\n// getOrElse[B >: A](default: ⇒ B): B\nx.map(_ + \"bar\").getOrElse(\"nothing\")",
      "language":"scala",
      "collapsed":false,
      "prompt_number":160,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val `empty?` = x.isEmpty\nval `nonEmpty?` = x.nonEmpty",
      "language":"scala",
      "collapsed":false,
      "prompt_number":161,
      "outputs":[]
    },{
      "cell_type":"heading",
      "source":"Opérations sur de multiples Option",
      "level":2
    },{
      "cell_type":"code",
      "input":"val some1 = Some(1)\nval some2 = Some(2)\nval some3 = Some(3)\nval none: Option[Int] = None",
      "language":"scala",
      "collapsed":false,
      "prompt_number":289,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// Avec `map` non ?\n\nsome1.map(v1 => \n  some2.map(v2 =>\n    v1 + v2\n  )\n)\n\n// presque...",
      "language":"scala",
      "collapsed":false,
      "prompt_number":290,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// FlatMap à la rescousse !\n\nsome1.flatMap(v1 => \n  some2.flatMap(v2 =>\n    some3.map(v3 =>\n      v1 + v2 + v3\n    )\n  )\n)\n  \n// Mieux !",
      "language":"scala",
      "collapsed":false,
      "prompt_number":291,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// C'est quoi la différence ?\n\n/*\n\n  abstract class Option[+A] extends Product with Serializable {\n    def isEmpty: Boolean\n    def get: A\n\n    def flatMap[B](f: A => Option[B]): Option[B] = {\n      if (this.isEmpty) None else f(this.get)\n    }\n\n    def map[B](f: A => B): Option[B] = {\n      flatMap(a => Option(f(a)))\n    }\n\n  }\n\n*/\n",
      "language":"scala",
      "collapsed":true,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// Et si une valeur n'est pas définie ?\n\nsome1.flatMap(v1 =>\n  none.map(v2 =>\n    v1 + v2\n  )\n)",
      "language":"scala",
      "collapsed":false,
      "prompt_number":292,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// Mais il y a plus simple !\nfor {\n  v1: Int <- some1: Option[Int]\n  v2 <- some2\n  v3 <- some3\n  if v3 >= 1\n} yield v1 + v2 + v3\n  \n// La magie sera expliquée plus tard",
      "language":"scala",
      "collapsed":false,
      "prompt_number":293,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// + toutes les propriétés d'un Iterable grâce à (ou à cause de...)\nimplicit def option2Iterable[A](xo: Option[A]): Iterable[A] = xo.toList\n  \nSome(1).toList.head\nSome(1).head",
      "language":"scala",
      "collapsed":false,
      "prompt_number":170,
      "outputs":[]
    },{
      "cell_type":"heading",
      "source":"D'ailleurs, beaucoup de ponts entre les Listes et les Options",
      "level":3
    },{
      "cell_type":"code",
      "input":"val list = List(1, 2, 3, 4, 5)\n  \nval `first?` = list.headOption\nval `last?` = list.lastOption\nval `found?` = list.find(_ == 6)\nval `exists?` = list.exists(_ % 2 == 0)",
      "language":"scala",
      "collapsed":false,
      "prompt_number":294,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val listOption = list.map { i =>\n  if (i%2 == 0) None\n  else Some(i)\n}\n\nval listFlat = listOption.flatten\n\nval listFlat2 = list.flatMap { i => if \n  (i%2 == 0) Some(i) \n  else None\n}\n\n// but please do that ;)\nlist.filter(_ % 2 == 0)",
      "language":"scala",
      "collapsed":false,
      "prompt_number":295,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"/*\n   Disgression: `x: String` VS `x: => String`\n*/",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val isDebugEnabled = false\n\ndef getUserNameFromDB() = {\n  println(\"fetch name with a WS call...\")\n  \"julien\"\n}\n\ndef debug(x: String)     = if (isDebugEnabled) println(x)\ndef debug2(x: => String) = if (isDebugEnabled) println(x)",
      "language":"scala",
      "collapsed":false,
      "prompt_number":6,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"debug(s\"${getUserNameFromDB()} log out\")",
      "language":"scala",
      "collapsed":false,
      "prompt_number":7,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"debug2(s\"${getUserNameFromDB()} log out\")",
      "language":"scala",
      "collapsed":false,
      "prompt_number":8,
      "outputs":[]
    },{
      "cell_type":"heading",
      "source":"Quizzz",
      "level":2
    },{
      "cell_type":"code",
      "input":"case class Employe(id: Int, nom: String)\ncase class Salaire(employeId: Int, brut: Int)\n  \nclass Societe {\n  private val employes = List(Employe(1, \"pierre\"), Employe(2, \"henri\"), Employe(3, \"charles\"), Employe(4, \"sarah\"))\n  private val salaires = List(Salaire(1, 1000), Salaire(2, 3000), Salaire(3, 400), Salaire(4, 2000))\n  \n  def getEmployeByNom(nom: String): Option[Employe] = employes.find(_.nom == nom)\n  def getSalaireById(userId: Int): Option[Salaire] = salaires.find(_.employeId == userId)\n  def listSalaires() = salaires\n}\n\nval tabmo = new Societe()",
      "language":"scala",
      "collapsed":false,
      "prompt_number":14,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// Salaire net de pierre ( = brut * 0.8 )\nval salaireNetPierre: Option[Double] = ???\n    \nassert(salaireNetPierre == Some(800d))",
      "language":"scala",
      "collapsed":false,
      "prompt_number":18,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// Liste des salaires nets > 500€ (sans utiliser filter, ni map, ni flatMap....)\nval listSalairesNetGT500: List[Double] = ???\n  \nval sumSalairesNetGT500 = ???\n  \nassert(sumSalairesNetGT500 == 4800d)",
      "language":"scala",
      "collapsed":false,
      "prompt_number":26,
      "outputs":[]
    }]
  }],
  "autosaved":[],
  "nbformat":3
}